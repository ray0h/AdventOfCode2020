
[1mFrom:[0m /home/chrx/Advent2020/Day19/decoder2.rb:88 Decoder#combine:

    [1;34m72[0m: [32mdef[0m [1;34mcombine[0m(array)
    [1;34m73[0m:   [32mreturn[0m array [32mif[0m array.length == [1;34m1[0m
    [1;34m74[0m: 
    [1;34m75[0m:   first = array.first
    [1;34m76[0m:   last = array.last
    [1;34m77[0m:   [32mif[0m first.length == [1;34m1[0m && last.length == [1;34m1[0m
    [1;34m78[0m:     [(first + last).join]
    [1;34m79[0m:   [32melsif[0m contains_array?(first) && contains_array?(last)
    [1;34m80[0m:     arr = []
    [1;34m81[0m:     first.length.times [32mdo[0m |i|
    [1;34m82[0m:       last.length.times [32mdo[0m |j|
    [1;34m83[0m:         arr.push first[i].product(last[j]).map(&[33m:join[0m)
    [1;34m84[0m:       [32mend[0m
    [1;34m85[0m:     [32mend[0m
    [1;34m86[0m:     arr
    [1;34m87[0m:   [32melsif[0m contains_array?(first)
 => [1;34m88[0m:     binding.pry [32mif[0m first.include?([31m[1;31m'[0m[31mbabbbrep[1;31m'[0m[31m[0m)
    [1;34m89[0m:     first.map { |el| el.product(last).map(&[33m:join[0m) }
    [1;34m90[0m:   [32melsif[0m contains_array?(last)
    [1;34m91[0m:     last.map { |el| first.product(el).map(&[33m:join[0m) }
    [1;34m92[0m:   [32melse[0m
    [1;34m93[0m:     first.product(last).map(&[33m:join[0m)
    [1;34m94[0m:   [32mend[0m
    [1;34m95[0m: [32mend[0m

